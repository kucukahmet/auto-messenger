// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPending = `-- name: CountPending :one
SELECT COUNT(*) AS cnt FROM messages WHERE status = 'pending'
`

func (q *Queries) CountPending(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPending)
	var cnt int64
	err := row.Scan(&cnt)
	return cnt, err
}

const getPendingForUpdate = `-- name: GetPendingForUpdate :many
SELECT id, phone_number, content, status, created_at, updated_at, sent_at, response_message_id, fail_reason, retry_count
FROM messages
WHERE status = 'pending'
ORDER BY created_at ASC
LIMIT $1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) GetPendingForUpdate(ctx context.Context, limit int32) ([]Message, error) {
	rows, err := q.db.Query(ctx, getPendingForUpdate, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SentAt,
			&i.ResponseMessageID,
			&i.FailReason,
			&i.RetryCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages (phone_number, content)
VALUES ($1, $2)
RETURNING id, phone_number, content, status, created_at, updated_at, sent_at, response_message_id, fail_reason, retry_count
`

type InsertMessageParams struct {
	PhoneNumber string `json:"phone_number"`
	Content     string `json:"content"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage, arg.PhoneNumber, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SentAt,
		&i.ResponseMessageID,
		&i.FailReason,
		&i.RetryCount,
	)
	return i, err
}

const listSent = `-- name: ListSent :many
SELECT id, phone_number, content, sent_at, response_message_id
FROM messages
WHERE status = 'sent'
ORDER BY sent_at DESC
LIMIT $1 OFFSET $2
`

type ListSentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSentRow struct {
	ID                int32              `json:"id"`
	PhoneNumber       string             `json:"phone_number"`
	Content           string             `json:"content"`
	SentAt            pgtype.Timestamptz `json:"sent_at"`
	ResponseMessageID pgtype.Text        `json:"response_message_id"`
}

func (q *Queries) ListSent(ctx context.Context, arg ListSentParams) ([]ListSentRow, error) {
	rows, err := q.db.Query(ctx, listSent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSentRow
	for rows.Next() {
		var i ListSentRow
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Content,
			&i.SentAt,
			&i.ResponseMessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFailed = `-- name: MarkFailed :exec
UPDATE messages
SET status = 'failed',
    fail_reason = $2,
    retry_count = retry_count + 1
WHERE id = $1
  AND status IN ('processing','pending')
`

type MarkFailedParams struct {
	ID         int32       `json:"id"`
	FailReason pgtype.Text `json:"fail_reason"`
}

func (q *Queries) MarkFailed(ctx context.Context, arg MarkFailedParams) error {
	_, err := q.db.Exec(ctx, markFailed, arg.ID, arg.FailReason)
	return err
}

const markProcessing = `-- name: MarkProcessing :exec
UPDATE messages
SET status = 'processing'
WHERE id = ANY($1::int[])
  AND status = 'pending'
`

func (q *Queries) MarkProcessing(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, markProcessing, dollar_1)
	return err
}

const markSent = `-- name: MarkSent :exec
UPDATE messages
SET status = 'sent',
    sent_at = now(),
    response_message_id = $2
WHERE id = $1
  AND status IN ('processing','pending')
`

type MarkSentParams struct {
	ID                int32       `json:"id"`
	ResponseMessageID pgtype.Text `json:"response_message_id"`
}

func (q *Queries) MarkSent(ctx context.Context, arg MarkSentParams) error {
	_, err := q.db.Exec(ctx, markSent, arg.ID, arg.ResponseMessageID)
	return err
}
